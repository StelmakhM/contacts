{"version":3,"file":"static/js/361.cf49d7b2.chunk.js","mappings":"oMAEe,SAASA,EAAQ,GAK5B,IAJHC,EAAI,EAAJA,KACAC,EAAI,EAAJA,KACAC,EAAS,EAATA,UAAU,EAAD,EACTC,SAAAA,OAAQ,MAAGC,SAASC,UAAS,EAE7B,OACC,+BACC,SAAC,IAAS,CACTF,SAAUA,EACVG,WAAS,EACTC,MAAOL,EACPM,GAAIP,EACJD,KAAMA,EACNC,KAAMA,EACNQ,QAAQ,WACRC,UAAQ,KAIZ,C,0KCtBaC,EAAiB,SAACC,GAAK,OAAKA,EAAMC,SAASA,QAAS,EACpDC,EAAkB,SAACF,GAAK,OAAKA,EAAMC,SAASE,SAAU,EACtDC,EAAoB,SAACJ,GAAK,OAAKA,EAAMK,MAAO,E,SCK1C,SAASC,IACvB,IAAMC,GAAWC,EAAAA,EAAAA,MACXP,GAAWQ,EAAAA,EAAAA,IAAYV,GACvBW,EAAiB,SAACC,GAAK,OAAKA,EAAMC,cAAcC,MAAO,EAuB7D,OACC,UAAC,IAAG,CACHC,UAAU,OACVC,SAxBmB,SAACC,GACrBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,OACb9B,EAAO6B,EAAKE,SAAS/B,KAAKsB,MAC1BU,EAASH,EAAKE,SAASC,OAAOV,MACtBV,EAASqB,MACtB,SAACC,GAAO,OAAKb,EAAea,EAAQlC,QAAUqB,EAAerB,EAAK,IAGlEmC,EAAAA,OAAAA,KAAY,oCAGbjB,GACCkB,EAAAA,EAAAA,IAAW,CACVpC,KAAAA,EACAgC,OAAAA,KAGFH,EAAKQ,QACN,EAMEC,GAAI,CACH,kBAAmB,CAAEC,EAAG,EAAGC,SAAU,KACrCC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,UAAW,UAEZC,aAAa,MAAK,WAElB,SAACC,EAAA,EAAU,CAACtC,QAAQ,KAAKiB,UAAU,KAAI,SAAC,iBAGxC,SAAC3B,EAAA,EAAO,CAACE,KAAK,OAAOD,KAAK,OAAOE,UAAU,UAC3C,SAACH,EAAA,EAAO,CAACE,KAAK,SAASD,KAAK,MAAME,UAAU,kBAC5C,SAAC8C,EAAA,EAAM,CAAChD,KAAK,SAASS,QAAQ,YAAYH,WAAS,EAAC2C,KAAK,QAAO,SAAC,kBAKpE,C,cCxDA,SAASC,EAAcC,GACtB,IACIC,EADAC,EAAO,EAIX,IAAKD,EAAI,EAAGA,EAAID,EAAOG,OAAQF,GAAK,EACnCC,EAAOF,EAAOI,WAAWH,KAAOC,GAAQ,GAAKA,GAG9C,IAAIG,EAAQ,IAEZ,IAAKJ,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAG,CAE1BI,GAAS,aADMH,GAAa,EAAJD,EAAU,KACdK,SAAS,KAAMC,OAAO,EAC3C,CAGA,OAAOF,CACR,CAEe,SAASG,EAAa1D,GACpC,IACM2D,EADgB3D,EAAK4D,SAAS,KAEjC5D,EACAA,EAAK6D,QAAQ7D,EAAK,GAAG,GAAD,OAAKA,EAAK,GAAE,MACnC,MAAO,CACNsC,GAAI,CACHwB,QAASb,EAAcjD,IAExB+D,SAAS,GAAD,OAAKJ,EAAYK,MAAM,KAAK,GAAG,GAAGC,eAAa,OAAGN,EACxDK,MAAM,KAAK,GAAG,GACdC,eAEJ,C,+DCfe,SAASC,IACvB,IAAMtD,GAAWQ,EAAAA,EAAAA,IAAYV,GACvBM,GAASI,EAAAA,EAAAA,IAAYL,GACrBG,GAAWC,EAAAA,EAAAA,MAEjB,GAAKP,EAAL,CAEA,IAAMS,EAAiB,SAACC,GAAK,OAAKA,EAAMC,cAAcC,MAAO,EACvD2C,EAAkBvD,EAASI,QAAO,SAACkB,GAAO,OAC/Cb,EAAea,EAAQlC,MAAM4D,SAASvC,EAAeL,GAAQ,IAG9D,OACC,iCACC,UAACoD,EAAA,EAAG,CACH9B,GAAI,CACHG,QAAS,OACTE,WAAY,UACZ0B,eAAgB,SAChBC,IAAK,MACLC,GAAI,QACJC,GAAI,SACH,WAEF,SAAC1B,EAAA,EAAU,CAACtC,QAAQ,KAAKiB,UAAU,KAAI,SAAC,kBAGxC,SAACgD,EAAA,EAAkB,CAACC,SAAS,QAAQnB,MAAM,gBAE5C,SAACa,EAAA,EAAG,CACH9B,GAAI,CACHG,QAAS,OACTkC,SAAU,OACVL,IAAK,MACL3B,WAAY,SACZiC,MAAO,OACPC,SAAU,SACT,SAEDV,EAAgBW,KAAI,gBAAGvE,EAAE,EAAFA,GAAIP,EAAI,EAAJA,KAAMgC,EAAM,EAANA,OAAM,OACvC,SAAC+C,EAAA,EAAI,CAEJzC,GAAI,CACHsC,MAAO,QACN,UAEF,UAACI,EAAA,EAAW,CACX1C,GAAI,CACHG,QAAS,OACTE,WAAY,UACX,WAEF,SAACsC,EAAA,GAAM,UAAKvB,EAAa1D,MACzB,UAACoE,EAAA,EAAG,CACH9B,GAAI,CACH4C,GAAI,OACH,WAEF,SAACpC,EAAA,EAAU,UAAE9C,KACb,SAAC8C,EAAA,EAAU,UAAEd,QAEd,SAACmD,EAAA,EAAU,CACV7C,GAAI,CACH4C,GAAI,QAELE,KAAK,MACL,aAAW,SACXC,QAAS,kBAAMnE,GAASoE,EAAAA,EAAAA,IAAc/E,GAAI,EAAC,UAE3C,SAACgF,EAAA,EAAU,UA5BRhF,EA+BC,QAnEU,CAwEtB,C,cC1Fe,SAASiF,IACvB,IAAMtE,GAAWC,EAAAA,EAAAA,MAKjB,OACC,iCACC,SAAC2B,EAAA,EAAU,CACVtC,QAAQ,KACRiB,UAAU,KACVa,GAAI,CAAEC,EAAG,UAAWK,UAAW,UAAW,SAC1C,oBAGD,SAAC9C,EAAA,EAAO,CACPE,KAAK,SACLD,KAAK,OACLE,UAAU,qBACVC,SAjBkB,SAACuF,GACrBvE,GAASwE,EAAAA,EAAAA,GAAUD,EAAE3D,OAAOR,OAC7B,MAmBD,C,cCjBe,SAASqE,IACvB,IAAMzE,GAAWC,EAAAA,EAAAA,MACXL,GAAYM,EAAAA,EAAAA,IAAYP,GAO9B,OANA+E,QAAQC,IAAI/E,IAEZgF,EAAAA,EAAAA,YAAU,WACT5E,GAAS6E,EAAAA,EAAAA,MACV,GAAG,KAGF,UAACC,EAAA,EAAS,CACTxD,SAAS,KACTf,UAAU,OACVa,GAAI,CACHC,EAAG,WACHE,QAAS,OACTkC,SAAU,OACVN,eAAgB,CACf4B,GAAI,gBACJC,GAAI,WAEJ,WAEF,UAAC9B,EAAA,EAAG,CACH9B,GAAI,CACHsC,MAAO,MACPC,SAAU,QACVsB,GAAI,OACH,WAEF,SAAClF,EAAW,KACZ,SAACuE,EAAM,QAER,SAACpB,EAAA,EAAG,CACH9B,GAAI,CACHsC,MAAO,MACPnC,QAAS,OACTC,cAAe,SACfC,WAAY,UACX,UAEF,SAACuB,EAAW,MAEZpD,IAAa,SAACsF,EAAA,EAAO,MAGzB,C","sources":["components/FormRow/FormRow.jsx","redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.jsx","utils/ContactAvatar/contactAvatar.jsx","components/ContactLists/ContactLists.jsx","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { TextField } from \"@mui/material\";\r\n\r\nexport default function FormRow({\r\n\ttype,\r\n\tname,\r\n\tlabelText,\r\n\tonChange = Function.prototype,\r\n}) {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<TextField\r\n\t\t\t\tonChange={onChange}\r\n\t\t\t\tfullWidth\r\n\t\t\t\tlabel={labelText}\r\n\t\t\t\tid={name}\r\n\t\t\t\ttype={type}\r\n\t\t\t\tname={name}\r\n\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\trequired\r\n\t\t\t/>\r\n\t\t</>\r\n\t);\r\n}\r\n","export const selectContacts = (state) => state.contacts.contacts;\r\nexport const selectIsLoading = (state) => state.contacts.isLoading;\r\nexport const selectFilterValue = (state) => state.filter;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Notify } from \"notiflix/build/notiflix-notify-aio\";\r\nimport { addContact } from \"../../redux/contacts/contactsOperations\";\r\nimport { Box, Button, Typography } from \"@mui/material\";\r\nimport FormRow from \"../FormRow/FormRow\";\r\nimport { selectContacts } from \"../../redux/contacts/contactsSelectors\";\r\n\r\nexport default function ContactForm() {\r\n\tconst dispatch = useDispatch();\r\n\tconst contacts = useSelector(selectContacts);\r\n\tconst normalizeValue = (value) => value.toLowerCase().trim();\r\n\r\n\tconst handleSubmit = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tconst form = event.target;\r\n\t\tconst name = form.elements.name.value;\r\n\t\tconst number = form.elements.number.value;\r\n\t\tconst exist = contacts.some(\r\n\t\t\t(contact) => normalizeValue(contact.name) === normalizeValue(name)\r\n\t\t);\r\n\t\tif (exist) {\r\n\t\t\tNotify.info(\"This contact is already in list\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tdispatch(\r\n\t\t\taddContact({\r\n\t\t\t\tname,\r\n\t\t\t\tnumber,\r\n\t\t\t})\r\n\t\t);\r\n\t\tform.reset();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Box\r\n\t\t\tcomponent=\"form\"\r\n\t\t\tonSubmit={handleSubmit}\r\n\t\t\tsx={{\r\n\t\t\t\t\"& > :not(style)\": { m: 1, maxWidth: 500 },\r\n\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\tflexDirection: \"column\",\r\n\t\t\t\talignItems: \"center\",\r\n\t\t\t\ttextAlign: \"center\",\r\n\t\t\t}}\r\n\t\t\tautoComplete=\"off\"\r\n\t\t>\r\n\t\t\t<Typography variant=\"h5\" component=\"h2\">\r\n\t\t\t\tAdd contact\r\n\t\t\t</Typography>\r\n\t\t\t<FormRow name=\"name\" type=\"text\" labelText=\"Name\" />\r\n\t\t\t<FormRow name=\"number\" type=\"tel\" labelText=\"Phone number\" />\r\n\t\t\t<Button type=\"submit\" variant=\"contained\" fullWidth size=\"large\">\r\n\t\t\t\tAdd contact\r\n\t\t\t</Button>\r\n\t\t</Box>\r\n\t);\r\n}\r\n","function stringToColor(string) {\r\n\tlet hash = 0;\r\n\tlet i;\r\n\r\n\t/* eslint-disable no-bitwise */\r\n\tfor (i = 0; i < string.length; i += 1) {\r\n\t\thash = string.charCodeAt(i) + ((hash << 5) - hash);\r\n\t}\r\n\r\n\tlet color = \"#\";\r\n\r\n\tfor (i = 0; i < 3; i += 1) {\r\n\t\tconst value = (hash >> (i * 8)) & 0xff;\r\n\t\tcolor += `00${value.toString(16)}`.slice(-2);\r\n\t}\r\n\t/* eslint-enable no-bitwise */\r\n\r\n\treturn color;\r\n}\r\n\r\nexport default function stringAvatar(name) {\r\n\tconst isNameCorrect = name.includes(\" \");\r\n\tconst correctName = isNameCorrect\r\n\t\t? name\r\n\t\t: name.replace(name[0], `${name[0]} `);\r\n\treturn {\r\n\t\tsx: {\r\n\t\t\tbgcolor: stringToColor(name),\r\n\t\t},\r\n\t\tchildren: `${correctName.split(\" \")[0][0].toUpperCase()}${correctName\r\n\t\t\t.split(\" \")[1][0]\r\n\t\t\t.toUpperCase()}`,\r\n\t};\r\n}\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { removeContact } from \"../../redux/contacts/contactsOperations\";\r\nimport stringAvatar from \"../../utils/ContactAvatar/contactAvatar\";\r\nimport { Box } from \"@mui/system\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport ImportContactsIcon from \"@mui/icons-material/ImportContacts\";\r\nimport {\r\n\tAvatar,\r\n\tCard,\r\n\tCardContent,\r\n\tIconButton,\r\n\tTypography,\r\n} from \"@mui/material\";\r\nimport {\r\n\tselectContacts,\r\n\tselectFilterValue,\r\n} from \"../../redux/contacts/contactsSelectors\";\r\n\r\nexport default function ContactList() {\r\n\tconst contacts = useSelector(selectContacts);\r\n\tconst filter = useSelector(selectFilterValue);\r\n\tconst dispatch = useDispatch();\r\n\r\n\tif (!contacts) return;\r\n\r\n\tconst normalizeValue = (value) => value.toLowerCase().trim();\r\n\tconst visibleContacts = contacts.filter((contact) =>\r\n\t\tnormalizeValue(contact.name).includes(normalizeValue(filter))\r\n\t);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Box\r\n\t\t\t\tsx={{\r\n\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\talignItems: \" center\",\r\n\t\t\t\t\tjustifyContent: \"center\",\r\n\t\t\t\t\tgap: \"1em\",\r\n\t\t\t\t\tmb: \"0.6em\",\r\n\t\t\t\t\tmt: \"0.4em\",\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<Typography variant=\"h5\" component=\"h2\">\r\n\t\t\t\t\tMy Phonebook\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<ImportContactsIcon fontSize=\"large\" color=\"primary\" />\r\n\t\t\t</Box>\r\n\t\t\t<Box\r\n\t\t\t\tsx={{\r\n\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\tflexWrap: \"wrap\",\r\n\t\t\t\t\tgap: \"1em\",\r\n\t\t\t\t\talignItems: \"center\",\r\n\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\tminWidth: \"280px\",\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{visibleContacts.map(({ id, name, number }) => (\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tkey={id}\r\n\t\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<CardContent\r\n\t\t\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\t\t\t\talignItems: \"center\",\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Avatar {...stringAvatar(name)} />\r\n\t\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t\t\t\tml: \"1em\",\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<Typography>{name}</Typography>\r\n\t\t\t\t\t\t\t\t<Typography>{number}</Typography>\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t\t\t\tml: \"auto\",\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tedge=\"end\"\r\n\t\t\t\t\t\t\t\taria-label=\"delete\"\r\n\t\t\t\t\t\t\t\tonClick={() => dispatch(removeContact(id))}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<DeleteIcon />\r\n\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t</CardContent>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t))}\r\n\t\t\t</Box>\r\n\t\t</>\r\n\t);\r\n}\r\n","import { Box, Typography } from \"@mui/material\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setFilter } from \"../../redux/filter/filterSlice\";\r\nimport FormRow from \"../FormRow/FormRow\";\r\n\r\nexport default function Filter() {\r\n\tconst dispatch = useDispatch();\r\n\tconst handleFilter = (e) => {\r\n\t\tdispatch(setFilter(e.target.value));\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Typography\r\n\t\t\t\tvariant=\"h5\"\r\n\t\t\t\tcomponent=\"h2\"\r\n\t\t\t\tsx={{ m: \"0.5em 0\", textAlign: \"center\" }}\r\n\t\t\t>\r\n\t\t\t\tSearch contact\r\n\t\t\t</Typography>\r\n\t\t\t<FormRow\r\n\t\t\t\tname=\"filter\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tlabelText=\"Enter contact name\"\r\n\t\t\t\tonChange={handleFilter}\r\n\t\t\t/>\r\n\t\t</>\r\n\t);\r\n}\r\n","import { Container } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ContactForm from \"../components/ContactForm/ContactForm\";\r\nimport ContactList from \"../components/ContactLists/ContactLists\";\r\nimport Filter from \"../components/Filter/Filter\";\r\nimport { fetchContacts } from \"../redux/contacts/contactsOperations\";\r\nimport { selectIsLoading } from \"../redux/contacts/contactsSelectors\";\r\nimport Spinner from \"../utils/Spinner/Spinner\";\r\n\r\nexport default function ContactsPage() {\r\n\tconst dispatch = useDispatch();\r\n\tconst isLoading = useSelector(selectIsLoading);\r\n\tconsole.log(isLoading);\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(fetchContacts());\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<Container\r\n\t\t\tmaxWidth=\"md\"\r\n\t\t\tcomponent=\"main\"\r\n\t\t\tsx={{\r\n\t\t\t\tm: \"1em auto\",\r\n\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\tflexWrap: \"wrap\",\r\n\t\t\t\tjustifyContent: {\r\n\t\t\t\t\tsm: \"space-between\",\r\n\t\t\t\t\txs: \"center\",\r\n\t\t\t\t},\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<Box\r\n\t\t\t\tsx={{\r\n\t\t\t\t\twidth: \"40%\",\r\n\t\t\t\t\tminWidth: \"250px\",\r\n\t\t\t\t\tmr: \"1em\",\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<ContactForm />\r\n\t\t\t\t<Filter />\r\n\t\t\t</Box>\r\n\t\t\t<Box\r\n\t\t\t\tsx={{\r\n\t\t\t\t\twidth: \"50%\",\r\n\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\tflexDirection: \"column\",\r\n\t\t\t\t\talignItems: \"center\",\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<ContactList />\r\n\t\t\t</Box>\r\n\t\t\t{isLoading && <Spinner />}\r\n\t\t</Container>\r\n\t);\r\n}\r\n"],"names":["FormRow","type","name","labelText","onChange","Function","prototype","fullWidth","label","id","variant","required","selectContacts","state","contacts","selectIsLoading","isLoading","selectFilterValue","filter","ContactForm","dispatch","useDispatch","useSelector","normalizeValue","value","toLowerCase","trim","component","onSubmit","event","preventDefault","form","target","elements","number","some","contact","Notify","addContact","reset","sx","m","maxWidth","display","flexDirection","alignItems","textAlign","autoComplete","Typography","Button","size","stringToColor","string","i","hash","length","charCodeAt","color","toString","slice","stringAvatar","correctName","includes","replace","bgcolor","children","split","toUpperCase","ContactList","visibleContacts","Box","justifyContent","gap","mb","mt","ImportContacts","fontSize","flexWrap","width","minWidth","map","Card","CardContent","Avatar","ml","IconButton","edge","onClick","removeContact","Delete","Filter","e","setFilter","ContactsPage","console","log","useEffect","fetchContacts","Container","sm","xs","mr","Spinner"],"sourceRoot":""}